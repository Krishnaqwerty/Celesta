# -*- coding: utf-8 -*-
# """waterwell.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/1axHRF6RaODAwqHX3-EvvhBeQYMxvv5Ak
# """

import numpy as np
import pandas as pd
# import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

df=pd.read_csv('Jaipur_Rajastan.csv')

df.isnull().sum().sum()

# df.shape



# df.describe()

# df.head()

from sklearn import preprocessing


label_encoder = preprocessing.LabelEncoder()


df['Hyd_Formation']= label_encoder.fit_transform(df['Hyd_Formation'])

dfnew=df[["Latitude","Longitude","Hyd_Formation","Wl_post_202_m_bbgl","WL_pre_2021mbgl"]]

# dfnew.head()

# dfnew.describe()

# dfnew.corr()

x=dfnew[["Latitude","Longitude","Hyd_Formation"]]
y=dfnew[["Wl_post_202_m_bbgl"]]
# y
# x

# index=dfnew.index
# yp=dfnew["WL_pre_2021mbgl"]

# plt.scatter(index,yp)
# plt.plot

from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor

import pickle



X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=46)


# regressors = {
      #"Random Forest": RandomForestRegressor(n_estimators=10,random_state=10),
      # "Gradient Boosting": GradientBoostingRegressor(learning_rate=0.1),
      # "SVR": SVR(),
      #"KNN": KNeighborsRegressor(),

# }

model =  GradientBoostingRegressor(learning_rate=0.1)


# my=np.array([[27.730500,75.336116,5]])
# for name, model in regressors.items():

model.fit(X_train, y_train)


      # y_pred = model.predict(X_test)
      # outpred=model.predict(my)
      # print("output",outpred)

      # r2 = r2_score(y_test, y_pred)

      # print(f"Model: {name}")

      # print(f"R^2 Score: {r2}")
      # print("-----------------------")

# num=model.predict(my)
# n=int(num)
# print(n)

# import pickle

pickle.dump(model, open('model.pkl', 'wb'))

model = pickle.load(open('model.pkl', 'rb'))

print(model.predict([[27.730500,75.336116,5]]))

